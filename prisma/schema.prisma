datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum AuthMethod {
  GOOGLE
  CREDENTIALS
}

enum ActivityType {
  SIGNUP
  DAILY_LOGIN
  QUIZ_CORRECT
  ADD_LOG
  SPOTLIGHT
  BUSINESSPROFILE_COMPLETE
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum SpotlightStatus {
  APPLIED
  IN_REVIEW
  APPROVED
  DISAPPROVED
  EXPIRED
  ACTIVE
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String?
  name                String
  role                Role
  image               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  transaction         Transaction[]
  jpEarned            Int                   @default(0)
  jpSpent             Int                   @default(0)
  jpBalance           Int                   @default(0)
  jpTransaction       Int                   @default(0)
  authMethod          AuthMethod            @default(CREDENTIALS) // Default to credentials
  planId              String?
  plan                Plan?                 @relation(fields: [planId], references: [id])
  planStart           DateTime? // When the user subscribed
  planEnd             DateTime? // When the plan expires
  isBlocked           Boolean?              @default(false)
  spotlight           Spotlight[]
  userBusinessProfile UserBusinessProfile[]
  blockedUsers        BlockedUsers[]
}

model Transaction {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  createdAt  DateTime @default(now())
}

model Activity {
  id              String          @id @default(uuid())
  activity        ActivityType    @unique
  jpAmount        Int
  transactionType TransactionType @default(CREDIT)
  Transaction     Transaction[]
}

model Plan {
  id              String @id @default(uuid())
  name            String @unique
  jpMultiplier    Float  @default(1.0) // Earn more JP per action
  discountPercent Float  @default(0.0) // Discount on JP spending
  durationDays    Int? // NULL for lifetime plans, else number of days
  users           User[]
  price           String
}

model Spotlight {
  id                  String          @id @default(uuid())
  userId              String
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt           DateTime?
  // jpUsed              Int
  appliedAt           DateTime        @default(now())
  status              SpotlightStatus @default(APPLIED)
  // isActive            Boolean         @default(false) //TODO: instead of seprate isActive add it to status only -- DONE
  defaultDurationDays Int             @default(1) // Default duration in days, can be changed by admin

  @@index([expiresAt])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  image     String?
  excerpt   String
  category  String
  content   String
  readTime  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBusinessProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Business Information
  name         String? // Business name
  businessInfo String? // General business information

  // Mission & Goals
  missionStatement String? // Mission statement of the business
  goals            String? // Goals of the user/business

  // Achievements & Offerings
  keyOfferings String? // What the business provides
  achievements String? // Notable achievements

  // Industry & Contact
  email         String? @unique // Business email
  phone         String? // Contact number
  website       String? // Business or personal website
  socialHandles Json? // Store social media links (LinkedIn, Instagram, X, GitHub, etc.)

  // Spotlight Information
  isSpotlightActive   Boolean @default(false) //!not needed
  featuredWorkTitle   String? // Title of featured work for spotlight
  featuredWorkDesc    String? // Description of featured work
  featuredWorkImage   String? // Image URL for featured work
  priorityContactLink String? // Primary contact method when in spotlight
  profileJpRewarded   Boolean @default(false) //!not needed
  isProfileComplete   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedUsers{
  id    String  @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  reason String
  blockedAt  DateTime @default(now())
  blockedBy  String? 
}
