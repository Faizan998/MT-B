datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearchPostgres"]
}

enum Role {
  ADMIN
  USER
}

enum AuthMethod {
  GOOGLE
  CREDENTIALS
}

enum ActivityType {
  SIGNUP
  DAILY_LOGIN
  QUIZ_CORRECT
  ADD_LOG
  SPOTLIGHT
  PROSPERITY_DROP
  BUSINESSPROFILE_COMPLETE
  MIRACLE_LOG
  PROGRESS_VAULT
  REFER_BY
  REFER_TO
  MAGIC_BOX_REWARD
  MAGIC_BOX_SHARED_REWARD
  GENERAL_FEEDBACK
  FEATURE_REQUEST
  BUG_REPORT
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum SpotlightStatus {
  APPLIED
  IN_REVIEW
  APPROVED
  DISAPPROVED
  EXPIRED
  ACTIVE
}

enum ProsperityDropStatus {
  APPLIED
  IN_REVIEW
  APPROVED
  DISAPPROVED
}

enum SpotlightActivityType {
  VIEW
  CONNECT
}

model User {
  id                            String                @id @default(uuid())
  email                         String                @unique
  password                      String?
  name                          String
  role                          Role
  image                         String?
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  transaction                   Transaction[]
  jpEarned                      Int                   @default(0)
  jpSpent                       Int                   @default(0)
  jpBalance                     Int                   @default(0)
  jpTransaction                 Int                   @default(0)
  authMethod                    AuthMethod            @default(CREDENTIALS)
  planId                        String?
  plan                          Plan?                 @relation(fields: [planId], references: [id])
  planStart                     DateTime?
  planEnd                       DateTime?
  isBlocked                     Boolean?              @default(false)
  spotlight                     Spotlight[]
  userBusinessProfile           UserBusinessProfile[]
  blockedUsers                  BlockedUsers[]
  miracleLog                    MiracleLog[]
  progressVault                 ProgressVault[]
  isEmailVerified               Boolean               @default(false)
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  prosperityDrops               ProsperityDrop[]

  referralCode String? @unique
  referredById String?
  referredBy   User?   @relation("UserReferrer", fields: [referredById], references: [id])
  referrals    User[]  @relation("UserReferrer")

  // âœ… These 2 are required to fix your error:
  referralsMade     Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("Referred")

  keyOfferings  String?
  achievements  String?
  goals         String?
  website       String?
  socialHandles Json?

  magicBoxes MagicBox[]

  @@index([name])
}

model Transaction {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  jpAmount   Int?
  createdAt  DateTime @default(now())
}

model Activity {
  id              String          @id @default(uuid())
  activity        ActivityType    @unique
  jpAmount        Int
  transactionType TransactionType @default(CREDIT)
  Transaction     Transaction[]
}

model Plan {
  id              String @id @default(uuid())
  name            String @unique
  jpMultiplier    Float  @default(1.0) // Earn more JP per action
  discountPercent Float  @default(0.0) // Discount on JP spending
  durationDays    Int? // NULL for lifetime plans, else number of days
  users           User[]
  price           String
}

model Spotlight {
  id                  String              @id @default(uuid())
  userId              String
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt           DateTime?
  // jpUsed              Int
  appliedAt           DateTime            @default(now())
  status              SpotlightStatus     @default(APPLIED)
  // isActive            Boolean         @default(false) //TODO: instead of seprate isActive add it to status only -- DONE
  defaultDurationDays Int                 @default(1) // Default duration in days, can be changed by admin
  activities          SpotlightActivity[]

  @@index([expiresAt])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  image     String?
  excerpt   String
  category  String
  content   String
  readTime  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBusinessProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Business Information
  name         String? // Business name
  businessInfo String? // General business information

  // Mission & Goals
  missionStatement String? // Mission statement of the business
  goals            String? // Goals of the user/business

  // Achievements & Offerings
  keyOfferings String? // What the business provides
  achievements String? // Notable achievements

  // Industry & Contact
  email         String? @unique // Business email
  phone         String? // Contact number
  website       String? // Business or personal website
  socialHandles Json? // Store social media links (LinkedIn, Instagram, X, GitHub, etc.)

  // Spotlight Information
  isSpotlightActive   Boolean @default(false) //!not needed
  featuredWorkTitle   String? // Title of featured work for spotlight
  featuredWorkDesc    String? // Description of featured work
  featuredWorkImage   String? // Image URL for featured work
  priorityContactLink String? // Primary contact method when in spotlight
  profileJpRewarded   Boolean @default(false) //!not needed
  isProfileComplete   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, businessInfo, missionStatement, goals, achievements, keyOfferings])
}

model BlockedUsers {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  reason    String
  blockedAt DateTime @default(now())
  blockedBy String?
}

model ProsperityDrop {
  id          String               @id @default(uuid())
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  // goalAmount  Int
  appliedAt   DateTime             @default(now())
  status      ProsperityDropStatus @default(APPLIED)
  // reviewedAt  DateTime?
  // reviewedBy  String?
  // jpCost      Int                  @default(5000) // Application cost

  @@index([status])
}

model Faq {
  id       String @id @default(cuid())
  question String
  answer   String
}

model SpotlightActivity {
  id          String                @id @default(cuid())
  type        SpotlightActivityType
  spotlight   Spotlight             @relation(fields: [spotlightId], references: [id], onDelete: Cascade)
  spotlightId String
  createdAt   DateTime              @default(now())

  @@index([spotlightId])
  @@index([createdAt])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  templateId  String   @unique // e.g., "verification-email", "password-reset"
  subject     String
  htmlContent String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MiracleLog {
  id               String    @id @default(uuid())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime? // Soft delete field
  userId           String
  jpPointsAssigned Boolean   @default(false) // Track if JP points were assigned
  user             User      @relation(fields: [userId], references: [id])
}

model ProgressVault {
  id               String    @id @default(uuid())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime? // Soft delete field
  userId           String
  jpPointsAssigned Boolean   @default(false) // Track if JP points were assigned
  user             User      @relation(fields: [userId], references: [id])
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  referredId String
  createdAt  DateTime @default(now())
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
  referred   User     @relation("Referred", fields: [referredId], references: [id])

  @@unique([referrerId, referredId])
}

model MagicBox {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isOpened  Boolean   @default(false)
  jpAmount  Int? // Total JP amount in the box (set when box is opened)
  openedAt  DateTime? // When the box was opened
  createdAt DateTime  @default(now())
  nextBoxAt DateTime // When the next box will be available

  // Store the random users as a JSON array of user IDs
  randomUserIds String[] // ["userId1", "userId2", "userId3", "userId4"]

  // The selected user for sharing
  selectedUserId String?

  // Has the JP been redeemed by the box owner?
  isRedeemed Boolean   @default(false)
  redeemedAt DateTime?

  @@index([userId])
  @@index([nextBoxAt])
}

model MagicBoxSettings {
  id          String   @id @default(uuid())
  minJpAmount Int      @default(100) // Minimum JP amount for a magic box
  maxJpAmount Int      @default(500) // Maximum JP amount for a magic box
  updatedAt   DateTime @updatedAt
}
