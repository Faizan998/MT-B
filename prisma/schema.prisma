datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum AuthMethod {
  GOOGLE
  CREDENTIALS
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String?
  name        String
  role        Role
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transaction Transaction[]
  jpEarned    Int           @default(0)
  jpSpent     Int           @default(0)
  authMethod  AuthMethod    @default(CREDENTIALS) // Default to credentials
  planId      String?
  plan        Plan?         @relation(fields: [planId], references: [id])
  planStart   DateTime? // When the user subscribed
  planEnd     DateTime? // When the plan expires// Default to credentials
  userBusinessProfile UserBusinessProfile[]
}

model Transaction {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  createdAt  DateTime @default(now())
}

enum TransactionType {
  DEBIT
  CREDIT
}

model Activity {
  id              String          @id @default(uuid())
  activity        ActivityType    @unique
  jpAmount        Int
  transactionType TransactionType @default(CREDIT)
  Transaction     Transaction[]
}

enum ActivityType {
  SIGNUP
  DAILY_LOGIN
  QUIZ_CORRECT
  ADD_LOG
  SPOTLIGHT
}

model Plan {
  id              String @id @default(uuid())
  name            String @unique
  jpMultiplier    Float  @default(1.0) // Earn more JP per action
  discountPercent Float  @default(0.0) // Discount on JP spending
  durationDays    Int? // NULL for lifetime plans, else number of days
  users           User[]
  price           String
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  image     String?
  excerpt   String
  category  String
  content   String
  readTime  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBusinessProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  
  // Business Information
  name              String?  // Business name
  businessInfo      String?  // General business information
  
  // Mission & Goals
  missionStatement  String?  // Mission statement of the business
  goals             String?  // Goals of the user/business
  
  // Achievements & Offerings
  keyOfferings      String?  // What the business provides
  achievements      String?  // Notable achievements
  
  // Industry & Contact
  email             String?  @unique // Business email
  phone             String?  // Contact number
  website           String?  // Business or personal website
  socialHandles     Json?    // Store social media links (LinkedIn, Instagram, X, GitHub, etc.)
  
  // Spotlight Information
  isSpotlightActive         Boolean    @default(false)  // Whether the user is in the spotlight
  featuredWorkTitle   String?    // Title of featured work for spotlight
  featuredWorkDesc    String?    // Description of featured work
  featuredWorkImage   String?    // Image URL for featured work
  priorityContactLink String?    // Primary contact method when in spotlight
  profileJpRewarded   Boolean          @default(false)
  isProfileComplete   Boolean          @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
